name: Publish Documentation

on:
  push:
    branches: ["main"]
    paths:
      - "docs/**"
      - "src/**.py"
      - "poetry.lock"
      - "pyproject.toml"
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "documentation"
  cancel-in-progress: true

jobs:
  publish:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get poetry from cache
        id: poetry-cache
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/pipx/venvs/poetry/**
          key: default-branch-poetry-cache

      - name: Install poetry if cache misses
        if: ${{ steps.poetry-cache.outputs.cache-hit != 'true' }}
        run: PIPX_HOME=$GITHUB_WORKSPACE/pipx pipx install poetry

      - name: Add poetry executable to PATH
        run: echo "$GITHUB_WORKSPACE/pipx/venvs/poetry/bin" >> $GITHUB_PATH

      - name: Set up Python and cache poetry install
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'poetry'

      - name: Install dependencies with poetry
        run: poetry install

      - name: Make HTML
        run: poetry run make clean && poetry run make html
        working-directory: ./docs

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'docs/_build/html'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
